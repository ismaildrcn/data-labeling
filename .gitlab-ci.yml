default:
  before_script:
    - $env:Path = "C:\Python\" + ";" + "C:\Python\Scripts\" + ";" + $env:Path
    - python --version

stages:
  - build
  - release
  - publish

build:
  stage: build
  tags:
    - windows
  script:
    - python -m pip install --upgrade pip
    - echo Uygulama test ediliyor...
    # - python main.py

release:
  stage: release
  tags:
    - windows
  script:
    - python -m pip install -r requirements.txt
    - python -m pip install pyinstaller
    - python -m PyInstaller main.spec
    # Release job ID'sini bir dosyaya kaydedelim
    - $env:CI_JOB_ID | Out-File -FilePath "job_id.txt"
  artifacts:
    paths:
      - dist/
      - job_id.txt  # Job ID'yi içeren dosyayı da artifacts olarak ekleyelim

publish:
  stage: publish
  tags:
    - windows
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      # Release job'unun ID'sini okutalım
      $RELEASE_JOB_ID = Get-Content -Path "job_id.txt"
      Write-Host "Release job ID: $RELEASE_JOB_ID"
      
      $headers = @{
        "PRIVATE-TOKEN" = "$env:GITLAB_API_TOKEN"
        "Content-Type" = "application/json"
      }

      # GitLab API için gerekli tüm alanları içeren body
      $body = @{
        name = "Release $env:CI_COMMIT_TAG"
        tag_name = "$env:CI_COMMIT_TAG"
        ref = "$env:CI_COMMIT_REF_NAME"          # Branch veya tag adı
        description = "Bu sürüm $env:CI_COMMIT_TAG etiketiyle oluşturuldu."
        released_at = (Get-Date).ToString("o")   # ISO 8601 format
        assets = @{
          links = @(
            @{
              name = "Görsel_Veri_Etiketleme_CATCH"
              url = "$env:CI_PROJECT_URL/-/jobs/$RELEASE_JOB_ID/artifacts/raw/dist/main.exe"
              link_type = "other"
            }
          )
        }
      }

      Write-Host "Preparing request..."
      Write-Host "Project ID: $env:CI_PROJECT_ID"
      Write-Host "Tag: $env:CI_COMMIT_TAG"
      Write-Host "Ref: $env:CI_COMMIT_REF_NAME"

      $jsonBody = $body | ConvertTo-Json -Depth 10 -Compress
      Write-Host "Request Body: $jsonBody"

      $apiUrl = "$env:CI_API_V4_URL/projects/$env:CI_PROJECT_ID/releases"
      Write-Host "API URL: $apiUrl"

      try {
        Write-Host "Sending request to GitLab API..."
        $response = Invoke-RestMethod `
          -Uri $apiUrl `
          -Method Post `
          -Headers $headers `
          -Body $jsonBody `
          -ContentType "application/json" `
          -Verbose
        
        Write-Host "Release created successfully!"
        Write-Host "Release URL: $($response._links.self)"
      }
      catch {
        Write-Host "Release creation failed!"
        Write-Host "Error Message: $($_.Exception.Message)"
        Write-Host "Status Code: $($_.Exception.Response.StatusCode.Value__)"
        
        # Response body'yi okumaya çalışalım
        $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
        $reader.BaseStream.Position = 0
        $reader.DiscardBufferedData()
        $responseBody = $reader.ReadToEnd()
        Write-Host "Response Body: $responseBody"
        
        throw
      }