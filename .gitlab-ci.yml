default:
  before_script:
    - $env:Path = "C:\Python\" + ";" + "C:\Python\Scripts\" + ";" + $env:Path
    - python --version

stages:
  - prepare
  - install
  - build
  - release

update_pip:
  stage: prepare
  tags:
    - windows
  script:
    - python -m pip install --upgrade pip
    - python -m pip install --upgrade setuptools wheel
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - when: never

install_dependencies:
  stage: install
  tags:
    - windows
  script:
    - python -m pip install -r requirements.txt
    - python -m pip install pyinstaller 
  needs: [update_pip]
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - when: never
  needs: [update_pip]


build_application:
  stage: build
  tags:
    - windows
  script:
    - python -m PyInstaller main.spec

    # asset.json oluşturuluyor
    - |
      $json = @(
        @{
          name       = "artifact.zip"
          url        = "$env:CI_PROJECT_URL/-/jobs/$env:CI_JOB_ID/artifacts/download"
          filepath   = "/artifact.zip"
          link_type  = "other"
        }
      ) | ConvertTo-Json -Compress
      Set-Content -Path "asset.json" -Value $json

    # artifact arşivleniyor
    - Compress-Archive -Path dist\* -DestinationPath artifact.zip
  artifacts:
    paths:
      - artifact.zip
      - asset.json
  needs: [install_dependencies]



release_job:
  variables:
    ASSET_URL: "$env:CI_PROJECT_URL/-/jobs/$env:CI_JOB_ID/artifacts/download"
  stage: release
  script:
    - echo "Release $env:CI_COMMIT_TAG"
    - $assetJson = Get-Content asset.json -Raw
    - & 'C:\GitLab-Runner\release-cli.exe' create --name "Release $env:CI_COMMIT_TAG" --tag-name "$env:CI_COMMIT_TAG" --description "Automated release for $env:CI_COMMIT_TAG" --assets-link "$assetJson"
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - when: never
  tags:
    - windows
  artifacts:
    paths:
      - release/
  needs: [build_application]
