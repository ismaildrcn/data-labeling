default:
  before_script:
    - $env:Path = "C:\Python\" + ";" + "C:\Python\Scripts\" + ";" + $env:Path
    - python --version

stages:
  - prepare
  - install
  - build
  - debug
  - release

update_pip:
  stage: prepare
  tags:
    - windows
  script:
    - python -m pip install --upgrade pip
    - python -m pip install --upgrade setuptools wheel
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - when: never

install_dependencies:
  stage: install
  tags:
    - windows
  script:
    - python -m pip install -r requirements.txt
    - python -m pip install pyinstaller 
  needs: [update_pip]
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - when: never


build_application:
  stage: build
  tags:
    - windows
  script:
    - python -m PyInstaller main.spec
  needs: [install_dependencies]

job:
  script:
    - echo "This is tag: $CI_COMMIT_TAG"
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - when: never

print_env:
  stage: debug
  script:
    - echo "CI_COMMIT_TAG: $CI_COMMIT_TAG"
    - echo "CI_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME"
    - echo "CI_COMMIT_REF_TYPE: $CI_COMMIT_REF_TYPE"


create_release:
  stage: release
  tags:
    - windows
  script:
      - echo "Release dosyası oluşturuluyor"
      - mkdir release
      - 'C:\GitLab-Runner\release-cli.exe create --name "Release %CI_COMMIT_TAG%" --description "Automated release for %CI_COMMIT_TAG%" --tag-name "%CI_COMMIT_TAG%"'
  artifacts:
    paths:
      - release/
  needs: [build_application]
  rules:
    - if: '$CI_COMMIT_TAG'
      when: always
    - when: never

# build:
#   stage: build
#   tags:
#     - windows
#   script:
#     - python -m pip install --upgrade pip
#     - echo Uygulama test ediliyor...
#     # - python main.py

# release:
#   stage: release
#   tags:
#     - windows
#   script:
#     - python -m pip install -r requirements.txt
#     - python -m pip install pyinstaller
#     - python -m PyInstaller main.spec
#     - |
#       $env:CI_JOB_ID | Out-File -FilePath "job_id.txt"
#       $previousTag = git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>$null
#       if (-not $previousTag) { $previousTag = "no previous tag" }
#       $previousTag | Out-File -FilePath "previous_tag.txt"
#       $commitList = git log --oneline "$previousTag..$env:CI_COMMIT_TAG" --format="%h %s"
#       $commitList | Out-File -FilePath "commit_list.txt"
#   artifacts:
#     paths:
#       - dist/
#       - job_id.txt
#       - previous_tag.txt
#       - commit_list.txt

# publish:
#   stage: publish
#   tags:
#     - windows
#   rules:
#     - if: $CI_COMMIT_TAG
#   needs:
#     - job: release
#       artifacts: true

#   before_script:
#     - |
#       $runnerDir = "C:\GitLab-Runner"
#       $env:Path = "$runnerDir;" + $env:Path
#       Write-Host ">> PATH includes: $runnerDir"

#   script:
#     - |
#       $jobId       = Get-Content job_id.txt
#       $previousTag = Get-Content previous_tag.txt
#       $commitList  = Get-Content commit_list.txt

#       $description = "Changes since $($previousTag):`n$commitList"

#       $assetJson = @{
#         name = "Application_Executable"
#         url = "$env:CI_PROJECT_URL/-/jobs/$jobId/artifacts/download"
#         link_type = "package"
#       } | ConvertTo-Json -Compress

#       & "C:\GitLab-Runner\release-cli.exe" create `
#         --name "Release $env:CI_COMMIT_TAG" `
#         --tag-name "$env:CI_COMMIT_TAG" `
#         --description "$description" `
#         --assets-link $assetJson
