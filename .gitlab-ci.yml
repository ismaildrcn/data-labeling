default:
  before_script:
    - $env:Path = "C:\Python\" + ";" + "C:\Python\Scripts\" + ";" + $env:Path
    - python --version

stages:
  - build
  - release
  - publish

build:
  stage: build
  tags:
    - windows
  script:
    - python -m pip install --upgrade pip
    - echo Uygulama test ediliyor...
    # - python main.py

release:
  stage: release
  tags:
    - windows
  script:
    - python -m pip install -r requirements.txt
    - python -m pip install pyinstaller
    - python -m PyInstaller main.spec
    # Release job ID'sini bir dosyaya kaydedelim
    - $env:CI_JOB_ID | Out-File -FilePath "job_id.txt"
  artifacts:
    paths:
      - dist/
      - job_id.txt  # Job ID'yi içeren dosyayı da artifacts olarak ekleyelim

publish:
  stage: publish
  tags:
    - windows
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      # Release job'unun ID'sini okutalım
      $RELEASE_JOB_ID = Get-Content -Path "job_id.txt"
      Write-Host "Release job ID: $RELEASE_JOB_ID"
      
      $headers = @{
        "PRIVATE-TOKEN" = "$env:GITLAB_API_TOKEN"
        "Content-Type" = "application/json"
      }

      $body = @{
        name = "Release $env:CI_COMMIT_TAG"
        tag_name = "$env:CI_COMMIT_TAG"
        ref = "$env:CI_COMMIT_TAG"  # Bu alan gerekli
        description = "Bu sürüm $env:CI_COMMIT_TAG etiketiyle oluşturuldu."
        assets = @{
          links = @(
            @{
              name = "Görsel_Veri_Etiketleme_CATCH"  # URL-safe isim
              url = "$env:CI_PROJECT_URL/-/jobs/$RELEASE_JOB_ID/artifacts/download"  # URL'i basitleştirdik
              link_type = "package"  # Link tipini belirttik
            }
          )
        }
      }

      $jsonBody = $body | ConvertTo-Json -Depth 10 -Compress
      Write-Host "JSON Body: $jsonBody"

      $apiUrl = "$env:CI_API_V4_URL/projects/$env:CI_PROJECT_ID/releases"
      Write-Host "Sending API request to: $apiUrl"

      try {
        $response = Invoke-RestMethod `
          -Uri $apiUrl `
          -Method Post `
          -Headers $headers `
          -Body $jsonBody `
          -ContentType "application/json"
        
        Write-Host "Release created successfully"
        Write-Host "Release URL: $($response.url)"
      }
      catch {
        Write-Host "Release creation failed!"
        Write-Host "Error Message: $($_.Exception.Message)"
        Write-Host "Response Status Code: $($_.Exception.Response.StatusCode.Value__)"
        Write-Host "Response Status Description: $($_.Exception.Response.StatusDescription)"
        
        # Detaylı hata mesajını almaya çalışalım
        $errorDetails = $_.ErrorDetails.Message
        if ($errorDetails) {
          Write-Host "Error Details: $errorDetails"
        }
        
        throw
      }