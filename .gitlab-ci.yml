default:
  before_script:
    - $env:Path = "C:\Python\" + ";" + "C:\Python\Scripts\" + ";" + $env:Path
    - python --version

stages:
  - build
  - release
  - publish

build:
  stage: build
  tags:
    - windows
  script:
    - python -m pip install --upgrade pip
    - echo Uygulama test ediliyor...
    # - python main.py

release:
  stage: release
  tags:
    - windows
  script:
    - python -m pip install -r requirements.txt
    - python -m pip install pyinstaller
    - python -m PyInstaller main.spec
    # Save current job ID and git info
    - |
      $env:CI_JOB_ID | Out-File -FilePath "job_id.txt"
      
      # Get previous tag
      $previousTag = git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>$null
      if (-not $previousTag) { $previousTag = "no previous tag" }
      $previousTag | Out-File -FilePath "previous_tag.txt"
      
      # Get commit list
      $commitList = git log --oneline "$previousTag..$env:CI_COMMIT_TAG" --format="%h %s"
      $commitList | Out-File -FilePath "commit_list.txt"
  artifacts:
    paths:
      - dist/
      - job_id.txt
      - previous_tag.txt
      - commit_list.txt

publish:
  stage: publish
  tags:
    - windows
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: release
      artifacts: true
  before_script:
    - |
      # Use existing release-cli
      $releaseCli = "C:\GitLab-Runner\release-cli.exe"
      if (-not (Test-Path $releaseCli)) {
        Write-Host "Error: release-cli not found at $releaseCli"
        throw "release-cli is required but not found"
      }
      
      # Add to PATH and verify
      $env:PATH += ";C:\GitLab-Runner"
      Write-Host "Verifying release-cli installation..."
      try {
        & $releaseCli --version
        Write-Host "release-cli verification successful"
      }
      catch {
        Write-Host "Error running release-cli: $($_.Exception.Message)"
        throw
      }
  script:
    - |
      $jobId = Get-Content job_id.txt
      $previousTag = Get-Content previous_tag.txt
      $commitList = Get-Content commit_list.txt

      Write-Host "Creating release for tag: $env:CI_COMMIT_TAG"
      Write-Host "Using job ID: $jobId"

      $description = "Release $env:CI_COMMIT_TAG`n`nChanges since previous tag ($previousTag):`n$commitList"

      # DİZİ OLARAK OLUŞTUR!
      $assetObj = @(
        @{
          name = "Application_Executable"
          url = "$env:CI_PROJECT_URL/-/jobs/$jobId/artifacts/download"
          link_type = "package"
        }
      )
      $assetLink = $assetObj | ConvertTo-Json -Compress

      # Çıktının köşeli parantezle başladığından emin ol!
      if (-not $assetLink.StartsWith("[")) {
        $assetLink = "[$assetLink]"
      }

      Write-Host "Asset Link: $assetLink"

      & $releaseCli create `
        --name "Release $env:CI_COMMIT_TAG" `
        --tag-name "$env:CI_COMMIT_TAG" `
        --ref "$env:CI_COMMIT_TAG" `
        --description "$description" `
        --assets-link "$assetLink"